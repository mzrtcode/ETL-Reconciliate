package com.itau.batch.tasklet;

import com.mzrt.conciliador.jpat.DTO.PaymentStub;
import com.mzrt.conciliador.jpat.DTO.SwiftMessageStub;
import com.mzrt.conciliador.jpat.entity.Message;
import com.mzrt.conciliador.jpat.repository.MessageRepository;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@RequiredArgsConstructor
public class LoadSwiftMessagesTasklet implements Tasklet {

    private final MessageRepository messageRepository;

    private final Logger log = LoggerFactory.getLogger(LoadSwiftMessagesTasklet.class);

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        List<Message> messages = messageRepository.findAll();

        List<SwiftMessageStub> stubs = messages.stream().map(message -> {
            List<PaymentStub> paymentStubs = message.getPayments().stream().map(payment -> new PaymentStub(
                   payment.getMpyInstrId(),
                    payment.getMpyAmount(),
                    payment.getMpyPayerAccount(),
                    payment.getMpyBenefAccount(),
                    // todo aqui no deberia ir el payerid o nit del cliente debe ir solo en el lote
                    payment.getMpyPayerId()
            )).toList();

            return new SwiftMessageStub(
                    message.getMmgSequence(),
                    paymentStubs.get(0).getClient(), // nit del cliente
                    message.getMmgLoadingTime().toLocalDate(),
                    message.getPayments().get(0).getMpyPaymentDate(),
                    paymentStubs.get(0).getAmount(),
                    paymentStubs
            );
        }).toList();

        ExecutionContext context = chunkContext.getStepContext().getStepExecution().getJobExecution().getExecutionContext();

        context.put("swiftMessages", stubs);
        return RepeatStatus.FINISHED;
    }
}

